<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="mapper.BoardMapper">
	


	<resultMap id="postResultMap" type="model.post">
		    <id property="seq" column="seq"/>
		    <result property="mem_id" column="mem_id"/>
		    <result property="mem_name" column="mem_name"/>
		    <result property="board_subject" column="board_subject"/>
		    <result property="board_content" column="board_content"/>
		    <result property="reg_date" column="reg_date" jdbcType="TIMESTAMP"/>
   			<result property="upt_date" column="upt_date" jdbcType="TIMESTAMP"/>
		    <result property="view_cnt" column="view_cnt"/>
		</resultMap>
		
		<resultMap id="fileResultMap" type="model.File">
		    <id property="fileSeq" column="file_seq"/>
		    <result property="listSeq" column="list_seq"/>
		    <result property="saveName" column="save_name"/>
		    <result property="savePath" column="save_path"/>
		    <result property="realName" column="real_name"/>
		</resultMap>
		
		 <!-- Result Map for the Board class -->
    <resultMap id="boardResultMap" type="model.Board">
        <id property="seq" column="SEQ"/>
        <result property="regDate" column="REG_DATE"/>
        <result property="id" column="ID"/>
        <result property="subject" column="SUBJECT"/>
        <result property="content" column="CONTENT"/>
        <result property="checkDate" column="CHECK_DATE"/>
        <result property="payOption" column="PAYOPTION"/>
        <result property="history" column="HISTORY"/>
        <result property="checkName" column="CHECKNAME"/>
         <result property="memName" column="MEM_NAME"/>
    </resultMap>
		
		<!-- getMemberById 쿼리 정의 -->
		<select id="findId" parameterType="String" resultType="int">
		    SELECT COUNT(*)  <!-- 예시로 COUNT(*)를 사용하고 있습니다. 실제로는 사용자의 존재 여부 등을 확인할 수 있는 카운트나 다른 적절한 반환 값을 사용하세요. -->
		    FROM member
		    WHERE id = #{id}
		</select>
		
		<!-- mapper/BoardMapper.xml -->
		<select id="checkPassword" parameterType="java.util.Map" resultType="int">
		    SELECT COUNT(*) FROM member
		    WHERE id = #{id} AND pwd = #{pwd}
		</select>
		
		 <select id="getUserInfo" resultType="model.User">
        SELECT id, pwd, mem_name as memName, rank
        FROM member
        WHERE id = #{id}
    </select>
		
		  <!-- Select query to get a list of boards by user ID -->
			<select id="getBoardList" resultMap="boardResultMap" parameterType="String">
			    SELECT b.*, m.mem_name
			    FROM board b
			    JOIN member m ON b.id = m.id
			    WHERE b.id = #{id}
			    ORDER BY b.seq DESC
			</select>


		<!-- seq 값 중 가장 높은 값 조회 -->
		<select id="findSeq" resultType="int">
		    SELECT MAX(seq) FROM board 
		</select>
		
		<!-- 글 추가 쿼리 -->
		<insert id="insertBoard" parameterType="model.Board">
		    INSERT INTO board (seq, id, subject, content, reg_Date, payOption)
		    VALUES ((SELECT MAX(seq) + 1 FROM board), #{id}, #{subject}, #{content}, SYSDATE, 'wait')
		</insert>
		
		<!-- 임시저장  -->
		<insert id="saveBoard" parameterType="model.Board">
		    INSERT INTO board (seq, id, subject, content, reg_Date, payOption)
		    VALUES ((SELECT MAX(seq) + 1 FROM board), #{id}, #{subject}, #{content}, SYSDATE, 'save')
		</insert>
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
   		<!-- 추가된 부분 -->
		<insert id="savePostAndGetSeq" parameterType="model.BoardWrite">
		    <selectKey keyProperty="seq" order="BEFORE" resultType="java.lang.Integer">
		        SELECT COALESCE(MAX(seq), 0) + 1 AS seq FROM board_study
		    </selectKey>
		    INSERT INTO board_study (seq, mem_name, mem_id, board_subject, board_content, reg_date)
		    VALUES (#{seq}, #{mem_name}, #{mem_id}, #{board_subject}, #{board_content}, #{reg_date, jdbcType=TIMESTAMP})
		</insert>
		
		<insert id="saveFile" parameterType="java.util.Map">
		    <selectKey keyProperty="file_seq" order="BEFORE" resultType="java.lang.Integer">
		        SELECT COALESCE(MAX(file_seq), 0) + 1 AS file_seq FROM file_study_table
		    </selectKey>
		    INSERT INTO file_study_table (list_seq, save_name, save_path, file_seq, real_name)
		    VALUES (#{postSeq}, #{fileName}, #{filePath}, #{file_seq}, #{createName})
		</insert>
		
			<!-- 매퍼 XML에서의 설정 -->
		<select id="getFilesByListSeq" parameterType="int" resultMap="fileResultMap">
		    SELECT * FROM file_study_table WHERE list_seq = #{seq}
		</select>


		




<!-- 	 <select id="getPost" resultMap="postResultMap">
	        SELECT
	         seq
	         , mem_id
	         , mem_name
	         , board_subject
	         , board_content
	         , reg_date, upt_date
	         , view_cnt
	        FROM board_study 
	        order by seq desc
	    </select>
    
		<select id="searchPost" parameterType="map" resultType="model.post">
    SELECT *
    FROM board_study
    <where>
        <choose>
            Title search
            <when test="searchOption == 'title'">
               AND LOWER(board_subject) LIKE LOWER('%' || #{keyword} || '%')
            </when>

            Title + Author search
            <when test="searchOption == 'titleAndAuthor'">
                AND LOWER(board_subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
                AND LOWER(mem_name) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            </when>

            ID search
            <when test="searchOption == 'id'">
                AND LOWER(mem_id) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            </when>		

            Date range search
            <when test="startDate != null and endDate != null">
                AND reg_date BETWEEN #{startDate} AND #{endDate}
            </when>

            Default: All search
            <otherwise>
                 AND LOWER(board_subject) LIKE LOWER('%' || #{keyword} || '%')
            </otherwise>
        </choose>
    </where>
</select> -->



<select id="getPost" resultMap="postResultMap" parameterType="map">
    SELECT
        seq, mem_id, mem_name, board_subject, board_content, reg_date, upt_date, view_cnt
    FROM board_study
    <where>
        <choose>
            <!-- Title search -->
            <when test="searchOption == 'title'">
                AND LOWER(board_subject) LIKE LOWER('%' || #{keyword} || '%')
            </when>

            <!-- Title + Author search -->
            <when test="searchOption == 'titleAndAuthor'">
                AND LOWER(board_subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
                AND LOWER(mem_name) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            </when>

            <!-- ID search -->
            <when test="searchOption == 'id'">
                AND LOWER(mem_id) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            </when>

            <!-- Date range search -->
            <when test="startDate != null and endDate != null">
                and to_char(reg_date, 'yyyy-MM-dd') between #{stDate} and #{endDate}
   				OR to_char(upt_date, 'yyyy-MM-dd') between #{stDate} and #{endDate}
            </when>

            <!-- Default: All search -->
            <otherwise>
                AND LOWER(board_subject) LIKE LOWER('%' || #{keyword} || '%')
            </otherwise>
        </choose>
    </where>
    ORDER BY seq DESC
</select>


	<!-- get total posts count -->
	<select id="getTotalPosts" resultType="int" parameterType="map">
	 
	        SELECT COUNT(*) FROM board_study
	        WHERE 1=1
	        <include refid="searchSql"></include>
	
	</select>




<sql id="searchSql">
    <if test="searchOption != '' and searchOption != null">
        <choose>
            <!-- Title search -->
            <when test="searchOption == 'title'">
                and board_subject like '%'||#{keyword}||'%'
            </when>
            
            <!-- Title and Author search -->
        	 <when test="searchOption == 'titleAndAuthor'">
			    and (board_subject like '%'||#{keyword}||'%' or mem_name like '%'||#{keyword}||'%')
			</when>

            	
            <!-- ID search -->
            <when test="searchOption == 'id'">
                and mem_id like '%'||#{keyword}||'%'
            </when>

            <!-- Add other search conditions here if needed -->
        </choose>
    </if>
    <!-- Additional date condition outside the <choose> block -->
    <if test="startDate != '' and startDate != null">
        and to_char(reg_date, 'yyyy-MM-dd') between #{startDate} and #{endDate}
        OR to_char(upt_date, 'yyyy-MM-dd') between #{startDate} and #{endDate}
    </if>
</sql>



<select id="getPostList" parameterType="map" resultMap="postResultMap">
    select
        seq,
        mem_name,
        mem_id,
        board_subject,
        board_content,
        reg_date,
        upt_date,
        view_cnt
    from (
        select
            rownum rn,
            seq,
            mem_name,
            mem_id,
            board_subject,
            board_content,
            reg_date,
            upt_date,
            view_cnt
        from (
            select
                seq,
                mem_name,
                mem_id,
                board_subject,
                board_content,
                reg_date,
                upt_date,
                view_cnt
            from board_study
            where 1=1
            <include refid="searchSql"></include>
            order by seq desc
        )
    )
    where rn between #{startRow} and #{endRow}
</select>


	
	<insert id="savePost" parameterType="model.BoardWrite">
    INSERT INTO board_study (seq, mem_name, mem_id, board_subject, board_content, reg_date)
    VALUES ((SELECT MAX(seq) FROM board_study) + 1, #{mem_name}, #{mem_id}, #{board_subject}, #{board_content}, #{reg_date, jdbcType=TIMESTAMP})
	</insert>
	<!-- nvl 일경우 0으로 시작하게 끔 해야지 처음에 글을 작성할때 오류가 생기는것을 방지 할수 있다. -->
	
		   
    
     <!-- 새로운 getPostBySeq 쿼리 -->
    <select id="getPostBySeq" resultMap="postResultMap" parameterType="int">
        SELECT seq, mem_id, board_subject, board_content, reg_date, upt_date, view_cnt
        FROM board_study
        WHERE seq = #{value}
    </select>
    
    <!-- 새로운 updatePost 쿼리 -->
    <update id="updatePost" parameterType="model.post">
        UPDATE board_study
        SET mem_id = #{mem_id},
            board_subject = #{board_subject},
            board_content = #{board_content},
            upt_date = #{upt_date}
        WHERE seq = #{seq}
    </update> 
    
     <!-- 글 삭제 쿼리 -->
    <delete id="deletePost" parameterType="java.lang.Long">
        DELETE FROM board_study WHERE seq = #{seq}
    </delete>
    
	
	  <!-- 다수의 포스트 삭제 쿼리 -->
	  <delete id="deleteSelectedPosts" parameterType="java.util.List">
	    	  DELETE FROM board_study WHERE seq IN
	        <foreach collection="list" item="item" open="(" separator="," close=")">
	            #{item}
	        </foreach>
	    </delete>
	

</mapper>
